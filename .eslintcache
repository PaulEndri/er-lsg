[{"/home/paulendri/Projects/ui/src/index.tsx":"1","/home/paulendri/Projects/ui/src/reportWebVitals.ts":"2","/home/paulendri/Projects/ui/src/App.tsx":"3","/home/paulendri/Projects/ui/src/utilities/bgImages.ts":"4","/home/paulendri/Projects/ui/src/components/itemModal.component.tsx":"5","/home/paulendri/Projects/ui/src/components/layout/index.tsx":"6","/home/paulendri/Projects/ui/src/views/wiki/index.tsx":"7","/home/paulendri/Projects/ui/src/views/planner/index.tsx":"8","/home/paulendri/Projects/ui/src/views/planner/state/index.tsx":"9","/home/paulendri/Projects/ui/src/views/players/index.tsx":"10","/home/paulendri/Projects/ui/src/state/itemModal/index.tsx":"11","/home/paulendri/Projects/ui/src/utilities/types.tsx":"12","/home/paulendri/Projects/ui/src/components/itemCard.component.tsx":"13","/home/paulendri/Projects/ui/src/utilities/getImageSrc.ts":"14","/home/paulendri/Projects/ui/src/utilities/playerData.ts":"15","/home/paulendri/Projects/ui/src/utilities/rarityColor.ts":"16","/home/paulendri/Projects/ui/src/components/characterThumbnail.component.tsx":"17","/home/paulendri/Projects/ui/src/utilities/getList.tsx":"18","/home/paulendri/Projects/ui/src/components/characterPortrait.component.tsx":"19","/home/paulendri/Projects/ui/src/views/wiki/children/characterPage.component.tsx":"20","/home/paulendri/Projects/ui/src/views/wiki/children/weaponPage.component.tsx":"21","/home/paulendri/Projects/ui/src/views/wiki/children/armorPage.component.tsx":"22","/home/paulendri/Projects/ui/src/views/wiki/children/itemPage.component.tsx":"23","/home/paulendri/Projects/ui/src/views/wiki/children/locationPage.component.tsx":"24","/home/paulendri/Projects/ui/src/views/planner/children/loadOutItem.component.tsx":"25","/home/paulendri/Projects/ui/src/views/planner/children/routePane.component.tsx":"26","/home/paulendri/Projects/ui/src/views/planner/children/selectionPane.component.tsx":"27","/home/paulendri/Projects/ui/src/components/itemModalButton.component.tsx":"28","/home/paulendri/Projects/ui/src/components/map/index.tsx":"29","/home/paulendri/Projects/ui/src/components/page/index.tsx":"30","/home/paulendri/Projects/ui/src/utilities/reverseWeaponLookup.ts":"31","/home/paulendri/Projects/ui/src/components/section.component.tsx":"32","/home/paulendri/Projects/ui/src/components/attributeChart.component.tsx":"33","/home/paulendri/Projects/ui/src/views/wiki/children/characterStatTable.component.tsx":"34","/home/paulendri/Projects/ui/src/views/wiki/children/ItemSearch.component.tsx":"35","/home/paulendri/Projects/ui/src/components/sidebar/index.tsx":"36","/home/paulendri/Projects/ui/src/views/wiki/children/animalPage.component.tsx":"37","/home/paulendri/Projects/ui/src/views/home/index.tsx":"38","/home/paulendri/Projects/ui/src/components/rank.component.tsx":"39","/home/paulendri/Projects/ui/src/views/planner/children/routeList.component.tsx":"40","/home/paulendri/Projects/ui/src/views/planner/children/sidebarContents.component.tsx":"41","/home/paulendri/Projects/ui/src/state/loadout/index.tsx":"42","/home/paulendri/Projects/ui/src/views/planner/children/routeCrafting.component.tsx":"43","/home/paulendri/Projects/ui/src/views/planner/children/routeCraftingColumn.component.tsx":"44"},{"size":565,"mtime":1610148293181,"results":"45","hashOfConfig":"46"},{"size":425,"mtime":1609786284710,"results":"47","hashOfConfig":"46"},{"size":1556,"mtime":1610242004911,"results":"48","hashOfConfig":"46"},{"size":234,"mtime":1609786284710,"results":"49","hashOfConfig":"46"},{"size":2315,"mtime":1610242004951,"results":"50","hashOfConfig":"46"},{"size":1146,"mtime":1610148387301,"results":"51","hashOfConfig":"46"},{"size":9361,"mtime":1610245052071,"results":"52","hashOfConfig":"46"},{"size":4787,"mtime":1610243514031,"results":"53","hashOfConfig":"46"},{"size":1437,"mtime":1609830546173,"results":"54","hashOfConfig":"46"},{"size":9236,"mtime":1610242234711,"results":"55","hashOfConfig":"46"},{"size":1679,"mtime":1609826225193,"results":"56","hashOfConfig":"46"},{"size":129,"mtime":1609786284710,"results":"57","hashOfConfig":"46"},{"size":5301,"mtime":1610182533901,"results":"58","hashOfConfig":"46"},{"size":92,"mtime":1609786284710,"results":"59","hashOfConfig":"46"},{"size":2394,"mtime":1609786284710,"results":"60","hashOfConfig":"46"},{"size":748,"mtime":1609811354463,"results":"61","hashOfConfig":"46"},{"size":2119,"mtime":1609972010178,"results":"62","hashOfConfig":"46"},{"size":1191,"mtime":1610261218991,"results":"63","hashOfConfig":"46"},{"size":878,"mtime":1609985126400,"results":"64","hashOfConfig":"46"},{"size":15072,"mtime":1610176345651,"results":"65","hashOfConfig":"46"},{"size":6898,"mtime":1610245277801,"results":"66","hashOfConfig":"46"},{"size":1211,"mtime":1609971970708,"results":"67","hashOfConfig":"46"},{"size":1159,"mtime":1609978849231,"results":"68","hashOfConfig":"46"},{"size":6751,"mtime":1610176212401,"results":"69","hashOfConfig":"46"},{"size":1110,"mtime":1610229394001,"results":"70","hashOfConfig":"46"},{"size":7404,"mtime":1610242165421,"results":"71","hashOfConfig":"46"},{"size":2404,"mtime":1610245781071,"results":"72","hashOfConfig":"46"},{"size":1517,"mtime":1609972008538,"results":"73","hashOfConfig":"46"},{"size":1404,"mtime":1609816943363,"results":"74","hashOfConfig":"46"},{"size":1156,"mtime":1609786284710,"results":"75","hashOfConfig":"46"},{"size":326,"mtime":1609786284710,"results":"76","hashOfConfig":"46"},{"size":1341,"mtime":1609984361250,"results":"77","hashOfConfig":"46"},{"size":724,"mtime":1610006420530,"results":"78","hashOfConfig":"46"},{"size":1532,"mtime":1610004444800,"results":"79","hashOfConfig":"46"},{"size":3512,"mtime":1610004251620,"results":"80","hashOfConfig":"46"},{"size":945,"mtime":1610182556371,"results":"81","hashOfConfig":"46"},{"size":5964,"mtime":1610242305231,"results":"82","hashOfConfig":"46"},{"size":2154,"mtime":1609887241403,"results":"83","hashOfConfig":"46"},{"size":876,"mtime":1610006753650,"results":"84","hashOfConfig":"46"},{"size":3815,"mtime":1610242604401,"results":"85","hashOfConfig":"46"},{"size":1255,"mtime":1610229376061,"results":"86","hashOfConfig":"46"},{"size":3552,"mtime":1610246619001,"results":"87","hashOfConfig":"46"},{"size":3069,"mtime":1610244079161,"results":"88","hashOfConfig":"46"},{"size":1998,"mtime":1610244280781,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},"15rwi8d",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"93"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"93"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"93"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"93"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"93"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"93"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"93"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"93"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"93"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"93"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"93"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"93"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"93"},"/home/paulendri/Projects/ui/src/index.tsx",["195"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport { setStaticCache } from \"erbs-sdk\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["196","197"],"/home/paulendri/Projects/ui/src/reportWebVitals.ts",[],"/home/paulendri/Projects/ui/src/App.tsx",[],"/home/paulendri/Projects/ui/src/utilities/bgImages.ts",[],"/home/paulendri/Projects/ui/src/components/itemModal.component.tsx",["198"],"import { Categories, Item } from \"erbs-sdk\";\nimport React, { useContext } from \"react\";\nimport { Button, Icon, Modal, Segment } from \"semantic-ui-react\";\nimport { ItemModalContext } from \"../state/itemModal\";\nimport { LoadoutContext } from \"../state/loadout.tsx\";\nimport { Types } from \"../utilities/types\";\nimport { ItemCardComponent } from \"./itemCard.component\";\n\nexport const ItemModalComponent = () => {\n  const { item, setItem, itemHistory, addingToLoadout } = useContext(ItemModalContext);\n  const { updateLoadout } = useContext(LoadoutContext);\n  const itemData = item ? (item instanceof Item ? item : new Item(item)) : null;\n  const addableItem =\n    itemData && [Categories.Armor, Categories.Weapon].includes(itemData.category as any);\n\n  return (\n    <Modal basic onClose={() => setItem(null)} open={item} size=\"small\">\n      <Modal.Content style={{ width: \"100%\", paddingBottom: 0 }}>\n        <div\n          style={{\n            maxWidth: \"450px\",\n            backgroundColor: \"rgba(66, 64, 74, 1)\",\n            textAlign: \"center\",\n            margin: \"auto\",\n          }}\n        >\n          <ItemCardComponent item={item} />\n        </div>\n      </Modal.Content>\n      <Modal.Actions style={{ paddingTop: 0 }}>\n        <div style={{ maxWidth: \"450px\", margin: \"auto\" }}>\n          <Segment\n            color=\"black\"\n            inverted\n            style={{ borderRadius: 0, marginTop: 0, paddingLeft: 0, paddingRight: 0 }}\n          >\n            {itemHistory && itemHistory.length > 0 && (\n              <Button\n                color=\"yellow\"\n                onClick={() => setItem(itemHistory[itemHistory.length - 1].name)}\n              >\n                <Icon name=\"backward\" />\n                Back\n              </Button>\n            )}\n            {addingToLoadout && addableItem && (\n              <Button\n                onClick={() => {\n                  setItem(null, false);\n                  updateLoadout(itemData.clientType, itemData);\n                }}\n                content={`Add to Loadout`}\n                color=\"green\"\n              />\n            )}\n            <Button color=\"red\" onClick={() => setItem(null, false)}>\n              <Icon name=\"close\" />\n              Close\n            </Button>\n          </Segment>\n        </div>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n","/home/paulendri/Projects/ui/src/components/layout/index.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/index.tsx",["199","200","201","202","203","204","205"],"/home/paulendri/Projects/ui/src/views/planner/index.tsx",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"import { Categories, Item, Loadout, Weapons, WeaponsLookup, Route as LoadoutRoute } from \"erbs-sdk\";\nimport React, { PureComponent, useContext, useState } from \"react\";\nimport {\n  Card,\n  Image,\n  List,\n  Label,\n  Grid,\n  Container,\n  Header,\n  Tab,\n  Menu,\n  Dimmer,\n} from \"semantic-ui-react\";\nimport { SelectionPaneComponent } from \"./children/selectionPane.component\";\nimport { RoutePaneComponent } from \"./children/routePane.component\";\nimport { Types } from \"../../utilities/types\";\nimport { PageComponent } from \"../../components/page\";\nimport { getImageSrc } from \"../../utilities/getImageSrc\";\nimport { LoadoutContext } from \"../../state/loadout\";\nimport { FilterContext, FilterProvider } from \"./state\";\nimport { ItemModalContext } from \"../../state/itemModal\";\nimport { Route, Switch, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { SidebarContents } from \"./children/sidebarContents.component\";\nimport { RouteCraftingComponent } from \"./children/routeCrafting.component\";\n\nexport const initialLoadout = {\n  Weapon: null,\n  Chest: null,\n  Head: null,\n  Arm: null,\n  Leg: null,\n  Accessory: null,\n};\n\nexport const loadoutMenu = [\n  Types.Weapon,\n  Types.Chest,\n  Types.Head,\n  Types.Arm,\n  Types.Leg,\n  Types.Accessory,\n];\n\nconst PlannerView = () => {\n  const { loadout, character, updateCharacter, setRoutes } = useContext(LoadoutContext);\n  const { setItem } = useContext(ItemModalContext);\n  const { massUpdate, filterStates, toggle } = useContext(FilterContext);\n  const [activeTab, setActiveTab] = useState(\n    window.location.pathname.includes(\"/route\")\n      ? 1\n      : window.location.pathname.includes(\"/craft\")\n      ? 2\n      : 0\n  );\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const onLoadoutItemClick = (item: Item<string>, type) => {\n    setActiveTab(0);\n    history.push(\"/planner/selection\");\n\n    if (item) {\n      setItem(item);\n    } else if (type) {\n      let _type = Object.keys(Weapons).includes(type) ? Types.Weapon : type;\n\n      const vals = Object.fromEntries(Object.keys(Types).map((key: any) => [key, key === _type]));\n      massUpdate(vals);\n    }\n  };\n\n  const generateRoute = () => {\n    setLoading(true);\n    try {\n      const route = new LoadoutRoute(loadout);\n      setRoutes(route.generate());\n\n      setActiveTab(2);\n      history.push(\"/planner/route\");\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <PageComponent\n      title=\"Eternal Return: Black Survival Route & Loadout Planner\"\n      sidebarTitle=\"Loadout\"\n      sidebarItems={\n        <SidebarContents\n          loadout={loadout}\n          selectedCharacter={character}\n          onLoadoutItemClick={onLoadoutItemClick}\n          generateRoute={generateRoute}\n        />\n      }\n    >\n      <Container fluid>\n        <Menu\n          className=\"attached\"\n          color=\"red\"\n          inverted\n          style={{\n            borderRadius: 0,\n            marginBottom: 0,\n            justifyContent: \"center\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          <Menu.Item\n            active={activeTab === 0}\n            onClick={() => {\n              setActiveTab(0);\n              history.push(`/planner/selection`);\n            }}\n            color=\"red\"\n            style={{\n              borderRadius: 0,\n            }}\n          >\n            Equipment Selection\n          </Menu.Item>\n          <Menu.Item\n            active={activeTab === 1}\n            onClick={() => {\n              setActiveTab(1);\n              history.push(`/planner/route`);\n            }}\n            color=\"red\"\n            style={{\n              borderRadius: 0,\n            }}\n          >\n            Routes Generation\n          </Menu.Item>\n          <Menu.Item\n            active={activeTab === 2}\n            onClick={() => {\n              setActiveTab(2);\n              history.push(`/planner/craft`);\n            }}\n            color=\"red\"\n            style={{\n              borderRadius: 0,\n            }}\n          >\n            Route Crafting\n          </Menu.Item>\n        </Menu>\n        <Container fluid>\n          <Switch>\n            <Route path={\"/planner\"} exact>\n              <SelectionPaneComponent />\n            </Route>\n            <Route path={\"/planner/selection\"} exact>\n              <SelectionPaneComponent />\n            </Route>\n            <Route path=\"/planner/route\" exact>\n              <RoutePaneComponent />\n            </Route>\n            <Route path=\"/planner/craft\" exact>\n              <RouteCraftingComponent />\n            </Route>\n          </Switch>\n        </Container>\n      </Container>\n      <Dimmer active={loading} />\n    </PageComponent>\n  );\n};\n\n// wp ch hea arm leg acc\n\n// q w e r d p\n\nexport default PlannerView;\n","/home/paulendri/Projects/ui/src/views/planner/state/index.tsx",[],"/home/paulendri/Projects/ui/src/views/players/index.tsx",["223","224","225","226","227","228"],"import { Characters } from \"erbs-sdk\";\nimport React, { useState } from \"react\";\nimport { Segment, Grid, Header, Container, Tab } from \"semantic-ui-react\";\nimport { useLocation, useRouteMatch } from \"react-router-dom\";\nimport { PageComponent } from \"../../components/page\";\nimport { BG_HALF, BG_THIRD } from \"../../utilities/bgImages\";\nimport { DefaultPlayerData } from \"../../utilities/playerData\";\nimport { CharacterPortrait } from \"../../components/characterPortrait.component\";\nimport { GameModes } from \"erbs-client\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { getRankLabel, RankComponent } from \"../../components/rank.component\";\n\nconst reverseCharLookup = Object.fromEntries(Object.entries(Characters).map(([k, v]) => [v, k]));\n\nconst ColorRankMap = {\n  [GameModes.Solo]: \"orange\",\n  [GameModes.Duos]: \"red\",\n  [GameModes.Squads]: \"brown\",\n};\n\nconst SeasonModeRankComponent = ({ data }) => {\n  const gamesData = [\n    {\n      title: \"Other Games\",\n      value: data.totalGames - data.totalWins,\n      color: \"#666666\",\n    },\n    { title: \"Games Won\", value: data.totalWins, color: \"#00FF00\" },\n  ];\n\n  return (\n    <Segment.Group style={{ border: 0, borderRadius: 0, background: \"rgba(31, 29, 29, 0.2)\" }}>\n      <Segment\n        inverted\n        style={{ border: 0, borderRadius: 0 }}\n        color={ColorRankMap[data.matchingTeamMode]}\n      >\n        <Header>{GameModes[data.matchingTeamMode]}</Header>\n      </Segment>\n      <Segment basic style={{ display: \"flex\" }}>\n        <Grid style={{ width: \"100%\" }}>\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <RankComponent mmr={data.mmr} />\n            </Grid.Column>\n            <Grid.Column width={12}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width={6}>\n                    <Header\n                      content={getRankLabel(data.mmr)}\n                      subheader={data.mmr + \" LP\"}\n                      size={\"huge\"}\n                      inverted\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <Grid.Column width={3}>\n                    <div style={{ width: \"100px\" }}>\n                      <PieChart\n                        data={gamesData}\n                        lineWidth={15}\n                        totalValue={data.totalGames}\n                        labelPosition={0}\n                        paddingAngle={5}\n                        label={({ dataEntry }) =>\n                          Math.round((data.totalWins / data.totalGames) * 100) + \"% Win\"\n                        }\n                      >\n                        Test\n                      </PieChart>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n    // <Grid centered>\n    //   <Grid.Column width={12} style={{ margin: 0, paddingLeft: 0, paddingRight: 0 }}>\n    //     <Segment basic fluid style={{ borderRadius: 0 }}>\n    //       <div style={{ width: \"100px\" }}>\n\n    //       </div>\n    //       <Segment>\n    //         <RankComponent mmr={data.mmr} />\n    //         <Statistic.Group>\n    //           <Statistic>\n    //             <Statistic.Value>{data.totalWins}</Statistic.Value>\n    //             <Statistic.Label>Wins</Statistic.Label>\n    //           </Statistic>\n    //           <Statistic>\n    //             <Statistic.Value>{data.totalGames}</Statistic.Value>\n    //             <Statistic.Label>Games</Statistic.Label>\n    //           </Statistic>\n    //           <Statistic>\n    //             <Statistic.Label>MMR</Statistic.Label>\n    //             <Statistic.Value>{data.mmr}</Statistic.Value>\n    //           </Statistic>\n    //           <Statistic>\n    //             <Statistic.Label>%ile</Statistic.Label>\n    //             <Statistic.Value>{100 - data.rankPercent * 100}</Statistic.Value>\n    //           </Statistic>\n    //         </Statistic.Group>\n    //       </Segment>\n\n    //       <Segment></Segment>\n\n    //       <Header>Averages</Header>\n    //       <Statistic.Group size=\"small\">\n    //         <Statistic>\n    //           <Statistic.Label>Placement</Statistic.Label>\n    //           <Statistic.Value>{data.averageRank}</Statistic.Value>\n    //         </Statistic>\n    //         <Statistic>\n    //           <Statistic.Label>Kills</Statistic.Label>\n    //           <Statistic.Value>{data.averageKills}</Statistic.Value>\n    //         </Statistic>\n    //         <Statistic>\n    //           <Statistic.Label>Hunts</Statistic.Label>\n    //           <Statistic.Value>{data.averageHunts}</Statistic.Value>\n    //         </Statistic>\n    //         <Statistic>\n    //           <Statistic.Label>Top 2</Statistic.Label>\n    //           <Statistic.Value>{Math.round(data.top2 * 100)}%</Statistic.Value>\n    //         </Statistic>\n    //         <Statistic>\n    //           <Statistic.Label>Top 3</Statistic.Label>\n    //           <Statistic.Value>{Math.round(data.top3 * 100)}%</Statistic.Value>\n    //         </Statistic>\n    //         <Statistic>\n    //           <Statistic.Label>Top 5</Statistic.Label>\n    //           <Statistic.Value>{Math.round(data.top5 * 100)}%</Statistic.Value>\n    //         </Statistic>\n    //       </Statistic.Group>\n    //     </Segment>\n    //   </Grid.Column>\n    // </Grid>\n  );\n};\n\nconst PlayerView = () => {\n  const location = useLocation();\n  const { path, url } = useRouteMatch();\n  const [activeSeason, setSeason] = useState(0);\n\n  const charsPlayed = DefaultPlayerData.map(({ characterStats }) =>\n    characterStats.map(({ characterCode, totalGames }) => [characterCode, totalGames])\n  )\n    .reduce((total, vals) => {\n      const data = Object.fromEntries(total);\n\n      vals.map(([code, count]) => {\n        if (data[code]) {\n          data[code] = data[code] + count;\n        } else {\n          data[code] = count;\n        }\n      });\n\n      return Object.entries(data);\n    }, [] as any)\n    .sort((a, b) => b[1] - a[1]);\n\n  const panes = DefaultPlayerData.map((data) => ({\n    menuItem: GameModes[data.matchingTeamMode],\n    render: () => <SeasonModeRankComponent data={data} />,\n  }));\n\n  console.log(\"[test]\", panes);\n  return (\n    <PageComponent title=\"Eternal Return: Black Survival Test Subject Records\">\n      <Segment\n        color=\"black\"\n        inverted\n        style={{\n          margin: 0,\n          marginTop: 12,\n          padding: 0,\n          borderRadius: 0,\n        }}\n      >\n        <Grid style={{ backgroundImage: BG_HALF }} centered>\n          <Grid.Row\n            stretched\n            style={{\n              backgroundColor: \"rgba(76, 70, 70, 1)\",\n              backgroundImage: BG_THIRD,\n              borderBottom: \"1px groove\",\n              borderTop: \"1px groove\",\n              padding: 0,\n            }}\n            centered\n          >\n            <Grid.Column\n              width={8}\n              style={{\n                backgroundColor: \"rgba(31, 30, 30, 0.7)\",\n                display: \"flex !important\",\n                flexDirection: \"row\",\n                padding: \"1rem\",\n                paddingTop: \"1.5rem\",\n                paddingBottom: \"1rem\",\n              }}\n            >\n              <CharacterPortrait\n                type=\"mini\"\n                margin={\"0\"}\n                width={100}\n                name={reverseCharLookup[charsPlayed[0][0]]}\n              />\n\n              <div style={{ width: \"100%\" }}>\n                <Header\n                  inverted\n                  size=\"large\"\n                  style={{\n                    marginBottom: 0,\n                    paddingLeft: \"1rem\",\n                    fontSize: \"50px\",\n                    textAlign: \"left\",\n                    paddingTop: \"8px\",\n                  }}\n                >\n                  Paul Endri\n                </Header>\n                <div style={{ display: \"flex\", justifyContent: \"flex-start\" }}>\n                  {charsPlayed.slice(1, 5).map(([c]) => (\n                    <div key={c}>\n                      <CharacterPortrait width={51} type=\"mini\" name={reverseCharLookup[c]} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n      <Container fluid>\n        <Grid centered>\n          <Grid.Column width={8} style={{ paddingLeft: 0, paddingRight: 0 }}>\n            <Segment\n              style={{\n                padding: 1,\n                paddingTop: 0,\n                borderTop: 0,\n                backgroundColor: \"rgba(51, 51, 51, 0.8)\",\n                width: \"100%\",\n              }}\n            >\n              <Tab\n                menu={{\n                  centered: true,\n                  color: \"orange\",\n                  tertiary: true,\n                  inverted: true,\n                  attached: true,\n                  style: { justifyContent: \"center\" },\n                }}\n                panes={panes}\n              />\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </PageComponent>\n  );\n};\n\nexport default PlayerView;\n","/home/paulendri/Projects/ui/src/state/itemModal/index.tsx",[],"/home/paulendri/Projects/ui/src/utilities/types.tsx",[],"/home/paulendri/Projects/ui/src/components/itemCard.component.tsx",["229"],"import React, { FunctionComponent, useContext } from \"react\";\nimport { Button, Header, Image, Label, List, Segment } from \"semantic-ui-react\";\nimport { Item } from \"erbs-sdk\";\nimport { getImageSrc } from \"../utilities/getImageSrc\";\nimport { itemRarityBackground, rarityColor } from \"../utilities/rarityColor\";\nimport { ItemModalButton } from \"./itemModalButton.component\";\nimport { ItemModalContext } from \"../state/itemModal\";\n\ntype ItemCardProps = {\n  item?: Item<string>;\n  showReqs?: boolean;\n  adding?: boolean;\n};\n\nexport const ItemCardComponent: FunctionComponent<ItemCardProps> = ({ item, showReqs }) => {\n  const { setItem } = useContext(ItemModalContext);\n  return (\n    <Segment.Group\n      style={{\n        borderRadius: 0,\n        backgroundColor: \"rgba(66, 64, 74, 0.2)\",\n      }}\n    >\n      {item && (\n        <React.Fragment>\n          <Segment basic compact textAlign=\"center\">\n            <Button\n              color={rarityColor(item.rarity)}\n              as=\"a\"\n              href={`https://eternalreturn.gamepedia.com/${item.name}`}\n              content={item.displayName}\n              style={{ marginBottom: \"1.5rem\", marginTop: \"1rem\" }}\n              label={item.clientType}\n            />\n            <Segment\n              basic\n              inverted\n              raised\n              style={{\n                // backgroundColor: '#877e8a',\n                margin: \"auto\",\n                marginBottom: \"10px\",\n                padding: \"1px\",\n                border: \"2px inset rgba(255, 190, 16, 0.45)\",\n                maxWidth: \"275px\",\n                overflow: \"hidden\",\n                background: itemRarityBackground(item.rarity),\n              }}\n            >\n              <Image floated=\"right\" src={getImageSrc(item.displayName)} fluid bordered />\n            </Segment>\n\n            <div style={{ color: \"white\", fontStyle: \"italic\" }}>{item.description}</div>\n          </Segment>\n          {item.stats && (\n            <Segment inverted raised style={{ backgroundColor: \"transparent\" }}>\n              <Header>Stats</Header>\n              <List\n                items={Object.entries(item.stats).map(\n                  ([[first, ...key], val]: any) =>\n                    `${first.toUpperCase()}${key\n                      .join(\"\")\n                      .replace(/([A-Z])/g, \" $1\")\n                      .trim()}: ${val}`\n                )}\n              />\n            </Segment>\n          )}\n          {item.buildsFrom && item.buildsFrom.length > 0 && (\n            <Segment inverted style={{ backgroundColor: \"transparent\" }}>\n              <Header>Built From</Header>\n              {item.buildsFrom.map(({ name, id }, idx) => (\n                <ItemModalButton key={`${name}${id}`} id={id} />\n              ))}\n            </Segment>\n          )}\n          {item.buildsInto && Object.entries(item.buildsInto).length > 0 && (\n            <Segment inverted style={{ backgroundColor: \"transparent\" }}>\n              <Header>Builds Into</Header>\n              {item.buildsInto.map((item, idx) => (\n                <ItemModalButton key={item.id} id={item.id} />\n              ))}\n            </Segment>\n          )}\n          {item.locations && Object.keys(item.locations).length > 0 && (\n            <Segment inverted style={{ backgroundColor: \"transparent\" }}>\n              <Header inverted>Found In</Header>\n              {Object.entries(item.locations).map(([location, value]) => (\n                <Label key={location} detail={value} content={location} color=\"yellow\" />\n              ))}\n            </Segment>\n          )}\n          {item.droppedFrom && item.droppedFrom.length > 0 && (\n            <Segment inverted style={{ backgroundColor: \"transparent\" }}>\n              <Header inverted>Dropped From</Header>\n              {item.droppedFrom.map(({ name }) => (\n                <Label key={name} content={name} color=\"red\" />\n              ))}\n            </Segment>\n          )}\n\n          {item.materials && showReqs && Object.entries(item.materials).length > 0 && (\n            <Segment inverted style={{ backgroundColor: \"rgba(0, 0, 0, 0.05)\" }} basic>\n              <Label style={{ width: \"100%\", textAlign: \"center\" }} color=\"red\">\n                Total Material Requirements\n              </Label>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  flexWrap: \"wrap\",\n                  flexDirection: \"row\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {Object.entries(item.materials).map(([material, quantity], key) => (\n                  <div style={{ margin: \"5px\" }}>\n                    <Label image key={key + material} onClick={() => setItem(material)}>\n                      <img src={getImageSrc(material)} />\n                      {quantity}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </Segment>\n          )}\n        </React.Fragment>\n      )}\n      {!item && (\n        <Segment\n          attached=\"top\"\n          basic\n          textAlign=\"center\"\n          placeholder\n          inverted\n          style={{ borderRadius: 0, border: 0 }}\n        >\n          No Item Selected\n        </Segment>\n      )}\n    </Segment.Group>\n  );\n};\n","/home/paulendri/Projects/ui/src/utilities/getImageSrc.ts",[],"/home/paulendri/Projects/ui/src/utilities/playerData.ts",[],"/home/paulendri/Projects/ui/src/utilities/rarityColor.ts",[],"/home/paulendri/Projects/ui/src/components/characterThumbnail.component.tsx",["230"],"import { FunctionComponent, useState } from \"react\";\nimport { getImageSrc } from \"../utilities/getImageSrc\";\n\ninterface CharacterThumbnailProps {\n  name: string;\n  isActive: boolean;\n  onClick?: Function;\n  width?: number;\n}\n\nconst CharacterThumbnailComponent: FunctionComponent<CharacterThumbnailProps> = ({\n  name,\n  onClick,\n  isActive,\n  width = 70,\n}) => {\n  const [hovering, setHovering] = useState(false);\n  const parentStyle = {\n    height: `${width + 10}px`,\n    width: `${width + 10}px`,\n    overflow: \"hidden\",\n    backgroundColor: \"rgba(200, 200, 200, 0.15)\",\n    // margin: '3px',\n    border: \"1px solid rgba(255, 255, 255, 0.1)\",\n  };\n\n  const containerStyle = {\n    overflow: \"hidden\",\n    transform: \"skew(45deg) scale(1.2)\",\n    backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n    border: \"1px solid \",\n    borderColor: \"rgba(200, 200, 200, 0.5)\",\n    width: `${width + 20}px`,\n    height: `${width + 20}px`,\n  };\n\n  if ((hovering || isActive) && onClick) {\n    Object.assign(containerStyle, {\n      backgroundColor: \"rgba(200, 200, 200, 1)\",\n      transform: \"skew(45deg) scale(1.2)\",\n      borderColor: \"white\",\n    });\n\n    Object.assign(parentStyle, {\n      backgroundColor: \"rgba(255, 190, 16, 0.9)\",\n    });\n  }\n\n  return (\n    <div\n      style={{\n        // padding: 0,\n        // margin: 2,\n        backgroundColor: \"rgba(255, 255, 255, 0.01)\",\n        border: \"1px solid rgba(255, 255, 255, 0.02)\",\n      }}\n    >\n      <div\n        onMouseEnter={() => setHovering(true)}\n        onMouseLeave={() => setHovering(false)}\n        onClick={(e) => (onClick ? onClick(e) : null)}\n        style={parentStyle}\n        className=\"test\"\n      >\n        <div style={containerStyle}>\n          <img\n            style={{\n              height: \"auto\",\n              width: `${width}px`,\n              margin: \"auto\",\n              marginTop: \"-5px\",\n              transform: \"skew(-45deg)\",\n            }}\n            src={getImageSrc(`characters/mini/${name}`)}\n            className=\"ui medium image\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CharacterThumbnailComponent;\n","/home/paulendri/Projects/ui/src/utilities/getList.tsx",["231","232"],"/home/paulendri/Projects/ui/src/components/characterPortrait.component.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/children/characterPage.component.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/children/weaponPage.component.tsx",["233"],"/home/paulendri/Projects/ui/src/views/wiki/children/armorPage.component.tsx",["234","235"],"import { Armors } from \"erbs-sdk\";\nimport React, { useState } from \"react\";\nimport { Button, Container, Menu } from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { getList } from \"../../../utilities/getList\";\nimport { ItemSearchComponent } from \"./ItemSearch.component\";\n\nexport const ArmorPage = () => {\n  const history = useHistory();\n  const { id } = useParams() as any;\n\n  return (\n    <Container fluid>\n      <Menu\n        className=\"attached\"\n        color=\"red\"\n        inverted\n        style={{\n          borderRadius: 0,\n          marginBottom: 0,\n          justifyContent: \"center\",\n        }}\n      >\n        {Object.values(Armors).map((armor) => (\n          <Menu.Item\n            key={armor}\n            active={id === armor}\n            onClick={() => {\n              history.push(`/wiki/armors/${armor}`);\n            }}\n            color=\"red\"\n            style={{\n              borderRadius: 0,\n            }}\n          >\n            {armor}\n          </Menu.Item>\n        ))}\n      </Menu>\n\n      <ItemSearchComponent\n        path={`/wiki/armors`}\n        items={getList(id)}\n        title={`${id || \"Armor\"} Options`}\n      />\n    </Container>\n  );\n};\n","/home/paulendri/Projects/ui/src/views/wiki/children/itemPage.component.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/children/locationPage.component.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/loadOutItem.component.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/routePane.component.tsx",["236"],"import React, { useContext, useState } from \"react\";\nimport { Segment, Grid, Header, Button, Label, Form, Dropdown } from \"semantic-ui-react\";\nimport { getImageSrc } from \"../../../utilities/getImageSrc\";\nimport { Item, Items, Locations, Route } from \"erbs-sdk\";\nimport { ItemModalContext } from \"../../../state/itemModal\";\nimport { LoadoutContext } from \"../../../state/loadout\";\nimport { RouteListComponent } from \"./routeList.component\";\n\nconst defaultWeights = {\n  Weapon: 1,\n  Chest: 1,\n  Head: 1,\n  Arm: 1,\n  Leg: 1,\n  Accessory: 1,\n};\n\nexport const RoutePaneComponent: React.FC = () => {\n  const [weights, updateWeights] = useState(defaultWeights);\n  const [startingLocation, setStartingLocation] = useState(null);\n  const { routes, setRoutes, loadout, setRoute } = useContext(LoadoutContext);\n  const { setItem } = useContext(ItemModalContext);\n\n  const generateRoute = () => {\n    try {\n      const route = new Route(loadout, weights);\n\n      const routes = route.generate(+Locations[startingLocation]);\n\n      setRoutes(routes);\n    } catch (e) {\n      console.error(e);\n      setRoutes([]);\n    }\n  };\n\n  return (\n    <Grid centered>\n      <Grid.Row>\n        <Grid.Column mobile={10} tablet={5} computer={4} widescreen={3}>\n          <Segment.Group\n            style={{\n              borderRadius: 0,\n              backgroundColor: \"rgba(74, 64, 62, 0.6)\",\n              marginTop: 14,\n            }}\n          >\n            <Segment\n              style={{\n                border: 0,\n                borderRadius: 0,\n              }}\n              raised\n              inverted\n              color=\"black\"\n              textAlign=\"center\"\n            >\n              <Header>Customization</Header>\n            </Segment>\n            <Segment basic inverted style={{ margin: 0, background: \"transparent\" }}>\n              <Header style={{ textAlign: \"center\" }}>Equipment Importance</Header>\n              <Form\n                inverted\n                style={{\n                  display: \"flex\",\n                  flexFlow: \"wrap column\",\n                  padding: \"10px\",\n                }}\n              >\n                {Object.keys(defaultWeights).map((weight, idx) => (\n                  <Form.Field key={weight + idx}>\n                    <label style={{ textTransform: \"capitalize\" }}>\n                      {loadout &&\n                      loadout[weight.toLowerCase()] &&\n                      loadout[weight.toLowerCase()].name\n                        ? loadout[weight.toLowerCase()].name\n                        : weight}\n                    </label>\n                    <input\n                      type=\"range\"\n                      step={1}\n                      style={\n                        {\n                          background: `linear-gradient(to right, #2185d0 0%, #2185d0 ${weights[weight]}%, #fff ${weights[weight]}%, #fff 100%)`,\n                          borderRadius: \"8px\",\n                          height: \"5px\",\n                          width: \"100%\",\n                          outline: \"none\",\n                          transition: \"background 450ms ease-in\",\n                          WebkitAppearance: \"none\",\n                          \"&::webkitSliderThumb\": {\n                            WebkitApperance: \"none\",\n                            backgroundColor: \"red\",\n                          },\n                        } as any\n                      }\n                      min={1}\n                      max={100}\n                      value={weights[weight]}\n                      onChange={(e) =>\n                        updateWeights({\n                          ...weights,\n                          [weight]: e.target.value,\n                        })\n                      }\n                    />\n                  </Form.Field>\n                ))}\n              </Form>\n            </Segment>\n            <Segment textAlign=\"center\" basic inverted style={{ padding: 8, margin: 0 }}>\n              <Header>Desired Starting Location</Header>\n            </Segment>\n            <Segment>\n              <Dropdown\n                fluid\n                placeholder=\"Automatic\"\n                value={startingLocation}\n                onChange={(e, { value }) => setStartingLocation(value)}\n                options={[{ key: 999, value: null, text: \"Automatic\" }].concat(\n                  Object.entries(Locations).map(([name, value]: [string, number]) => ({\n                    key: value,\n                    text: name,\n                    value: value,\n                  }))\n                )}\n              />\n            </Segment>\n\n            <Segment textAlign=\"center\" basic inverted style={{ padding: 8, margin: 0 }}>\n              <Header>Total Materials Needed</Header>\n            </Segment>\n            <Segment style={{ background: \"transparent\" }}>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  flexWrap: \"wrap\",\n                  flexDirection: \"row\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {Object.entries(loadout.materials)\n                  .filter(([material]) => material && material !== \"undefined\")\n                  .map(([material, quantity], key) => (\n                    <div key={key + material} style={{ margin: \"5px\" }}>\n                      <Label\n                        color=\"teal\"\n                        as={Button}\n                        image\n                        onClick={() => setItem(new Item(Items[material]))}\n                      >\n                        <img src={getImageSrc(Items[material].replace(/([A-Z])/g, \" $1\").trim())} />\n                        <Label.Detail style={{ marginLeft: \"-.5em\" }}>{quantity}</Label.Detail>\n                      </Label>\n                    </div>\n                  ))}\n              </div>\n            </Segment>\n          </Segment.Group>\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Grid.Row centered>\n            <Grid.Column width={16} textAlign=\"center\">\n              <Segment.Group\n                style={{\n                  borderRadius: 0,\n                  backgroundColor: \"rgba(74, 64, 62, 0.5)\",\n                  marginTop: 14,\n                }}\n              >\n                <Segment\n                  style={{\n                    border: 0,\n                    borderRadius: 0,\n                  }}\n                  color=\"black\"\n                  inverted\n                  raised\n                >\n                  <Button fluid onClick={generateRoute} content=\"Generate Routes\" color=\"green\" />\n                </Segment>\n                <Segment basic compact style={{ width: \"fit-content\" }}>\n                  {!routes && (\n                    <Segment secondary inverted placeholder textAlign=\"center\">\n                      No Routes Generated\n                    </Segment>\n                  )}\n                  {routes && (\n                    <div>\n                      <RouteListComponent\n                        setRoute={setRoute}\n                        root={routes.root}\n                        routes={routes.routes}\n                      />\n                    </div>\n                  )}\n                </Segment>\n              </Segment.Group>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n","/home/paulendri/Projects/ui/src/views/planner/children/selectionPane.component.tsx",[],"/home/paulendri/Projects/ui/src/components/itemModalButton.component.tsx",["237","238","239"],"import React, { useContext } from \"react\";\nimport { Button, Image, Label, Segment } from \"semantic-ui-react\";\nimport { Item } from \"erbs-sdk\";\nimport { getImageSrc } from \"../utilities/getImageSrc\";\nimport { itemRarityBackground, rarityColor } from \"../utilities/rarityColor\";\nimport { ItemModalContext } from \"../state/itemModal\";\nimport { useLocation } from \"react-router-dom\";\ntype ItemModalButtonProps = {\n  id: any;\n  label?: any;\n  action?: any;\n  item?: any;\n};\n\nconst InnerButton = React.memo<ItemModalButtonProps>(({ item, action, label }) => (\n  <Button\n    compact\n    label={label}\n    content={<Image centered rounded size=\"tiny\" src={getImageSrc(item.displayName)} />}\n    onClick={action}\n    style={{\n      borderRadius: 0,\n      marginBottom: \"5px\",\n      maxWidth: label ? \"150px\" : \"100px\",\n      padding: 0,\n      border: \"2px outset rgba(255, 255, 255, 0.2)\",\n      background: itemRarityBackground(item.rarity),\n    }}\n  />\n));\n\nexport const ItemModalButton: React.FC<ItemModalButtonProps> = ({ id, label, action }) => {\n  const { setItem } = useContext(ItemModalContext);\n  const location = useLocation();\n\n  let item;\n  try {\n    item = id instanceof Item ? id : new Item(id);\n  } catch (e) {\n    return <div>Error {id} does not exist</div>;\n  }\n\n  const innerAction = () =>\n    action\n      ? action(item, location.pathname.includes(\"planner\"))\n      : setItem(item, location.pathname.includes(\"planner\"));\n\n  return <InnerButton id={id} item={item} label={label} action={innerAction} />;\n};\n","/home/paulendri/Projects/ui/src/components/map/index.tsx",["240","241","242"],"import React, { DOMElement, useCallback, useEffect, useRef, useState } from \"react\";\nimport { ReactComponent as Map } from \"./LumiaIslandMap.svg\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Loader } from \"semantic-ui-react\";\nimport { Locations } from \"erbs-sdk\";\n\ntype Props = {\n  onClick?: any;\n  selected?: Locations[];\n};\n\nexport const MapComponent: React.FC<Props> = ({ onClick, selected }) => {\n  const [id, setId] = useState(null);\n  const el = useCallback((node) => {\n    if (node) {\n      const links = node.getElementsByTagName(\"a\");\n\n      for (let i = 0; i < links.length; i++) {\n        const link = links[i];\n        const location = link.getAttribute(\"data-location\");\n\n        if (\n          selected &&\n          link.className &&\n          link.className.baseVal &&\n          selected.length &&\n          selected.some((sel) => link.className.baseVal.indexOf(sel) >= 0)\n        ) {\n          link.classList.add(\"selected\");\n        } else {\n          link.classList.remove(\"selected\");\n        }\n\n        if (onClick && location) {\n          link.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n\n            onClick(location);\n          });\n        }\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!id) {\n      setId(uuidv4());\n    }\n  }, [id]);\n\n  if (!id) {\n    return <Loader />;\n  }\n\n  return (\n    <div id={id} ref={el}>\n      <Map />\n    </div>\n  );\n};\n","/home/paulendri/Projects/ui/src/components/page/index.tsx",["243"],"import React, { StatelessComponent, ReactNode } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { BG_THIRD } from '../../utilities/bgImages';\nimport { SidebarComponent } from '../sidebar';\n\ninterface PageProps {\n\tsidebarItems?: ReactNode;\n\ttitle: ReactNode;\n\tsidebarTitle?: ReactNode;\n}\n\nexport const PageComponent: StatelessComponent<PageProps> = ({\n\tsidebarItems,\n\ttitle,\n\tsidebarTitle,\n\tchildren\n}) => {\n\treturn (\n\t\t<Segment basic style={{ padding: 0 }}>\n\t\t\t{sidebarTitle && (\n\t\t\t\t<SidebarComponent title={sidebarTitle}>{sidebarItems}</SidebarComponent>\n\t\t\t)}\n\t\t\t<div style={{ overflow: 'auto' }}>\n\t\t\t\t<Segment\n\t\t\t\t\tinverted\n\t\t\t\t\traised\n\t\t\t\t\tcolor=\"red\"\n\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t\tsecondary\n\t\t\t\t\tpadded={false}\n\t\t\t\t\tbasic\n\t\t\t\t\tstyle={{ marginBottom: 0, padding: 0 }}\n\t\t\t\t>\n\t\t\t\t\t<Header as=\"h2\" style={{ padding: '10px' }}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</Header>\n\t\t\t\t</Segment>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'flow-root',\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\toverflowX: 'hidden',\n\t\t\t\t\t\tmaxHeight: window.innerHeight - 90,\n\n\t\t\t\t\t\tminHeight: window.innerHeight - 180\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Segment>\n\t);\n};\n","/home/paulendri/Projects/ui/src/utilities/reverseWeaponLookup.ts",[],"/home/paulendri/Projects/ui/src/components/section.component.tsx",["244"],"import React, { useState } from \"react\";\nimport { Header, Icon, Segment } from \"semantic-ui-react\";\n\ntype Props = {\n  title: string;\n  toggleCollapse?: any;\n  collapsed?: any;\n};\nexport const SectionComponent: React.FC<Props> = ({\n  title,\n  collapsed,\n  toggleCollapse,\n  children,\n}) => {\n  const [localCollapsed, setCollapsed] = useState(false);\n\n  const showContent = toggleCollapse ? collapsed : localCollapsed;\n  const clickHandler = toggleCollapse ? toggleCollapse : setCollapsed;\n  return (\n    <>\n      <Segment\n        className=\"fancy-hover\"\n        color=\"black\"\n        basic\n        onClick={() => clickHandler(!showContent)}\n        inverted\n        style={{\n          borderRadius: 0,\n          marginBottom: 0,\n          border: 0,\n          cursor: \"pointer\",\n          borderTop: \"3px groove rgba(255, 250, 250, 0.2)\",\n        }}\n      >\n        <Icon name={showContent ? \"plus square outline\" : \"minus square outline\"} />\n        <h3 className=\"header inverted\" style={{ display: \"inline\", paddingLeft: \"8px\" }}>\n          {title}\n        </h3>\n      </Segment>\n      <div\n        style={{\n          backgroundColor: \"rgba(70, 66, 66, 0.6)\",\n          paddingTop: \"1rem\",\n          textAlign: \"center\",\n          display: showContent ? \"block\" : \"none\",\n        }}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n","/home/paulendri/Projects/ui/src/components/attributeChart.component.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/children/characterStatTable.component.tsx",[],"/home/paulendri/Projects/ui/src/views/wiki/children/ItemSearch.component.tsx",[],"/home/paulendri/Projects/ui/src/components/sidebar/index.tsx",["245","246"],"import React, { ReactNode, StatelessComponent } from \"react\";\nimport { Segment, Menu, Header } from \"semantic-ui-react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\ninterface SidebarProps {\n  title: ReactNode;\n}\nexport const SidebarComponent: StatelessComponent<SidebarProps> = ({ title, children }) => {\n  return (\n    <Segment\n      basic\n      compact\n      inverted\n      floated=\"left\"\n      textAlign=\"left\"\n      color=\"black\"\n      style={{\n        border: 0,\n        borderRadius: 0,\n        marginTop: 0,\n        minHeight: \"95vh\",\n        padding: 0,\n        marginRight: 0,\n        width: \"150px\",\n      }}\n    >\n      <Menu inverted vertical style={{ border: 0, borderRadius: 0 }} fluid color=\"black\">\n        <Menu.Header style={{ padding: \"10px\" }}>\n          <Header as=\"h2\" color=\"black\" inverted>\n            {title}\n          </Header>\n        </Menu.Header>\n        {children}\n      </Menu>\n    </Segment>\n  );\n};\n","/home/paulendri/Projects/ui/src/views/wiki/children/animalPage.component.tsx",["247"],"import React from \"react\";\nimport {\n  Grid,\n  Container,\n  Menu,\n  Segment,\n  Header,\n  Label,\n  Button,\n  Table,\n  Image,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Animal, IAnimal, AnimalsLookup } from \"erbs-sdk\";\nimport { ItemModalButton } from \"../../../components/itemModalButton.component\";\nimport { getImageSrc } from \"../../../utilities/getImageSrc\";\n\nconst AnimalView: React.FC = ({ children }) => {\n  const history = useHistory();\n  const { id } = useParams() as any;\n\n  return (\n    <Container fluid>\n      <Menu\n        className=\"attached\"\n        color=\"red\"\n        inverted\n        style={{\n          borderRadius: 0,\n          marginBottom: 0,\n          justifyContent: \"center\",\n        }}\n      >\n        {Object.keys(AnimalsLookup)\n          .filter((x) => isNaN(x as any))\n          .map((type) => (\n            <Menu.Item\n              key={type}\n              active={id === type}\n              onClick={() => {\n                history.push(`/wiki/animals/${type}`);\n              }}\n              color=\"red\"\n              style={{\n                borderRadius: 0,\n              }}\n            >\n              {type}\n            </Menu.Item>\n          ))}\n      </Menu>\n      {children}\n    </Container>\n  );\n};\n\nexport const AnimalLandingPage = () => {\n  const history = useHistory();\n\n  return (\n    <AnimalView>\n      <Segment style={{ margin: 0, borderRadius: 0 }} color=\"orange\" inverted>\n        <Header inverted size=\"large\">\n          Lumia Island Wild Life Catalog\n        </Header>\n      </Segment>\n\n      <Segment\n        style={{ marginTop: 0, borderRadius: 0, background: \"transparent\" }}\n        textAlign=\"center\"\n      >\n        <Table selectable inverted striped collapsing style={{ margin: \"auto\", borderRadius: 0 }}>\n          <Table.Header>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Locations</Table.HeaderCell>\n            <Table.HeaderCell>Drops</Table.HeaderCell>\n          </Table.Header>\n          <Table.Body>\n            {Object.entries<Animal>(Animal.SOURCES).map(([animal, aniObject]) => (\n              <Table.Row key={animal} onClick={() => history.push(`/wiki/animals/${animal}`)}>\n                <Table.Cell>{aniObject.displayName}</Table.Cell>\n                <Table.Cell>\n                  {Object.entries(aniObject.locations).map(([name, quantity], id) => (\n                    <Label key={id} content={name} detail={quantity} />\n                  ))}\n                </Table.Cell>\n                <Table.Cell>\n                  {aniObject.items.map(({ name, percentage }) => (\n                    <Label key={name}>\n                      {`${name}`.replace(/([A-Z])/g, \" $1\").trim()}\n                      <Label.Detail>{percentage}</Label.Detail>\n                    </Label>\n                  ))}\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Segment>\n    </AnimalView>\n  );\n};\n\nexport const AnimalPage = () => {\n  const { id } = useParams() as any;\n  const history = useHistory();\n\n  const animal: Animal = id ? (Animal.Generate(id) as any) : null;\n\n  return (\n    <AnimalView>\n      <Segment\n        color=\"black\"\n        inverted\n        style={{\n          margin: 0,\n          marginTop: 12,\n          padding: 0,\n          borderRadius: 0,\n        }}\n      >\n        <Grid\n          centered\n          style={{\n            backgroundImage: `url(${process.env.PUBLIC_URL}/assets/images/animals/${id}.jpg) `,\n            backgroundSize: \"cover\",\n          }}\n        >\n          <Grid.Row\n            verticalAlign=\"middle\"\n            style={{\n              backgroundColor: \"rgba(76, 70, 70, 1)\",\n              borderBottom: \"1px groove\",\n              borderTop: \"1px groove\",\n            }}\n            centered\n          >\n            <Grid.Column width={16} color=\"orange\">\n              <Header inverted textAlign=\"center\">\n                {id}\n              </Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row\n            verticalAlign=\"middle\"\n            style={{\n              backgroundColor: \"rgba(38, 35, 35, 0.5)\",\n              borderBottom: \"1px groove\",\n              borderTop: \"1px groove\",\n            }}\n            centered\n          >\n            <Image centered size=\"medium\" src={getImageSrc(`/animals/${animal.name}`)} />\n          </Grid.Row>\n          <Grid.Row centered style={{ backgroundColor: \"rgba(10, 0, 0, 0.5)\" }}>\n            <Grid.Column width={16} textAlign=\"center\">\n              <Header inverted textAlign=\"center\">\n                Known Habitats\n              </Header>\n\n              {animal.locations &&\n                Object.keys(animal.locations).length > 0 &&\n                Object.entries(animal.locations).map(([name, quantity]) => (\n                  <Label\n                    size=\"large\"\n                    color=\"yellow\"\n                    as={Button}\n                    onClick={() => history.push(`/wiki/location/${name}`)}\n                    detail={quantity}\n                    content={name}\n                  />\n                ))}\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Column width={16} style={{ borderTop: \"1px solid white\" }}>\n            <Header inverted textAlign=\"center\">\n              Drops\n            </Header>\n          </Grid.Column>\n          <Grid.Row\n            fluid\n            style={{\n              padding: \"5rem\",\n              paddingTop: \"10px\",\n              borderRadius: 0,\n              backgroundColor: \"rgba(31, 29, 29, 0.9)\",\n              marginLeft: 0,\n            }}\n            textAlign=\"center\"\n          >\n            {animal.items.map(({ name, percentage }, id) => (\n              <ItemModalButton id={`${name}`.replace(\" \", \"\")} key={id} label={percentage + \"%\"} />\n            ))}\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    </AnimalView>\n  );\n};\n","/home/paulendri/Projects/ui/src/views/home/index.tsx",["248"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { PageComponent } from \"../../components/page\";\n\nconst HomeView = () => {\n  return (\n    <PageComponent title=\"Eternal Return Lumia Survival Guide\">\n      <Container fluid textAlign=\"center\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            paddingTop: \"10%\",\n          }}\n        >\n          <Header\n            as={Link}\n            to=\"/wiki\"\n            size=\"large\"\n            inverted\n            className=\"fancy-hover\"\n            style={{\n              marginBottom: 0,\n              height: \"100%\",\n              backgroundColor: \"rgba(51, 51, 51, 0.7)\",\n              padding: \"8% 5% 8% 5%\",\n              border: \"2px inset rgba(255, 255, 255, 0.1)\",\n              borderRight: \"3px groove rgba(200, 200, 200, 0.4)\",\n              textShadow: \"0px 1px 4px rgba(255, 255, 255, 0.9)\",\n              background: \"radial-gradient(rgba(51, 51,51,1), rgba(11, 11, 11, 0.5))\",\n            }}\n          >\n            <span style={{ paddingLeft: \"-2rem\" }}>Information</span>\n            <br />\n            <span style={{ paddingLeft: \"3rem\" }}>Center</span>\n          </Header>\n          <Header\n            as={Link}\n            to=\"/planner\"\n            size=\"large\"\n            inverted\n            className=\"fancy-hover\"\n            style={{\n              height: \"100%\",\n              backgroundColor: \"rgba(51, 51, 51, 0.7)\",\n              padding: \"8% 5% 8% 5%\",\n              border: \"2px inset rgba(255, 255, 255, 0.1)\",\n              borderLeft: \"3px groove rgba(200, 200, 200, 0.4)\",\n              textShadow: \"0px 1px 4px rgba(255, 255, 255, 0.9)\",\n              background: \"radial-gradient(rgba(51, 51,51,1), rgba(11, 11, 11, 0.5))\",\n            }}\n          >\n            <span style={{ paddingRight: \"2rem\" }}>Surival</span>\n            <br />\n            <span style={{}}>Planner</span>\n          </Header>\n        </div>\n      </Container>\n    </PageComponent>\n  );\n};\n\nexport default HomeView;\n","/home/paulendri/Projects/ui/src/components/rank.component.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/routeList.component.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/sidebarContents.component.tsx",[],"/home/paulendri/Projects/ui/src/state/loadout/index.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/routeCrafting.component.tsx",[],"/home/paulendri/Projects/ui/src/views/planner/children/routeCraftingColumn.component.tsx",["249"],"import React from \"react\";\nimport { Grid, Header, Button, Label, Image, Segment } from \"semantic-ui-react\";\nimport { getImageSrc } from \"../../../utilities/getImageSrc\";\nimport { ItemModalButton } from \"../../../components/itemModalButton.component\";\nimport { Item, Location } from \"erbs-sdk\";\n\ntype RouteCraftingComponentProps = {\n  location: Location;\n  completed: Item[];\n  craftable: Item[];\n  setItem: (val) => null;\n};\n\nexport const RouteCraftingColumnComponent: React.FC<RouteCraftingComponentProps> = ({\n  location,\n  completed,\n  craftable,\n  setItem,\n}) => {\n  return (\n    <Grid.Column width={3}>\n      <Segment\n        style={{ padding: 0, borderRadius: 0, backgroundColor: \"rgba(29, 25, 25, 0.65)\" }}\n        textAlign=\"center\"\n        inverted\n      >\n        <Segment color=\"black\" inverted style={{ borderRadius: 0, margin: 0 }}>\n          <Header inverted>{location.name}</Header>\n        </Segment>\n        <Image\n          src={`${process.env.PUBLIC_URL}/assets/images/locations/${location.name}.jpg`}\n          width={\"100%\"}\n        />\n\n        {completed && completed.length > 0 && (\n          <>\n            <Header inverted style={{ margin: \"1rem\" }}>\n              Loadout Items Completed\n            </Header>\n            {completed.map((item) => (\n              <ItemModalButton id={item.id} item={item} key={item.id} />\n            ))}\n          </>\n        )}\n\n        <Header inverted style={{ margin: \"1rem\" }}>\n          Items Craftable\n        </Header>\n        <div style={{ display: \"flex\", flexFlow: \"row wrap\", justifyContent: \"center\" }}>\n          <div style={{ display: \"block\" }}></div>\n          {craftable.map((item) => (\n            <div key={item.id} style={{ margin: \"5px\" }}>\n              <Label style={{ padding: 0 }} color=\"teal\" as={Button} onClick={() => setItem(item)}>\n                <img src={getImageSrc(item.displayName)} />\n              </Label>\n            </div>\n          ))}\n        </div>\n      </Segment>\n    </Grid.Column>\n  );\n};\n",{"ruleId":"250","severity":1,"message":"251","line":7,"column":10,"nodeType":"252","messageId":"253","endLine":7,"endColumn":24},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"250","severity":1,"message":"258","line":6,"column":10,"nodeType":"252","messageId":"253","endLine":6,"endColumn":15},{"ruleId":"250","severity":1,"message":"259","line":1,"column":49,"nodeType":"252","messageId":"253","endLine":1,"endColumn":62},{"ruleId":"250","severity":1,"message":"260","line":2,"column":17,"nodeType":"252","messageId":"253","endLine":2,"endColumn":30},{"ruleId":"250","severity":1,"message":"261","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":17},{"ruleId":"250","severity":1,"message":"262","line":3,"column":31,"nodeType":"252","messageId":"253","endLine":3,"endColumn":35},{"ruleId":"250","severity":1,"message":"263","line":11,"column":10,"nodeType":"252","messageId":"253","endLine":11,"endColumn":27},{"ruleId":"250","severity":1,"message":"264","line":14,"column":10,"nodeType":"252","messageId":"253","endLine":14,"endColumn":17},{"ruleId":"250","severity":1,"message":"265","line":68,"column":17,"nodeType":"252","messageId":"253","endLine":68,"endColumn":20},{"ruleId":"250","severity":1,"message":"266","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":20},{"ruleId":"250","severity":1,"message":"267","line":1,"column":28,"nodeType":"252","messageId":"253","endLine":1,"endColumn":35},{"ruleId":"250","severity":1,"message":"259","line":1,"column":46,"nodeType":"252","messageId":"253","endLine":1,"endColumn":59},{"ruleId":"250","severity":1,"message":"260","line":2,"column":17,"nodeType":"252","messageId":"253","endLine":2,"endColumn":30},{"ruleId":"250","severity":1,"message":"268","line":4,"column":3,"nodeType":"252","messageId":"253","endLine":4,"endColumn":7},{"ruleId":"250","severity":1,"message":"269","line":5,"column":3,"nodeType":"252","messageId":"253","endLine":5,"endColumn":8},{"ruleId":"250","severity":1,"message":"262","line":6,"column":3,"nodeType":"252","messageId":"253","endLine":6,"endColumn":7},{"ruleId":"250","severity":1,"message":"270","line":7,"column":3,"nodeType":"252","messageId":"253","endLine":7,"endColumn":8},{"ruleId":"250","severity":1,"message":"271","line":8,"column":3,"nodeType":"252","messageId":"253","endLine":8,"endColumn":7},{"ruleId":"250","severity":1,"message":"272","line":10,"column":3,"nodeType":"252","messageId":"253","endLine":10,"endColumn":9},{"ruleId":"250","severity":1,"message":"273","line":11,"column":3,"nodeType":"252","messageId":"253","endLine":11,"endColumn":6},{"ruleId":"250","severity":1,"message":"274","line":19,"column":10,"nodeType":"252","messageId":"253","endLine":19,"endColumn":21},{"ruleId":"250","severity":1,"message":"275","line":21,"column":25,"nodeType":"252","messageId":"253","endLine":21,"endColumn":39},{"ruleId":"250","severity":1,"message":"276","line":23,"column":37,"nodeType":"252","messageId":"253","endLine":23,"endColumn":50},{"ruleId":"250","severity":1,"message":"277","line":46,"column":31,"nodeType":"252","messageId":"253","endLine":46,"endColumn":46},{"ruleId":"250","severity":1,"message":"278","line":48,"column":23,"nodeType":"252","messageId":"253","endLine":48,"endColumn":35},{"ruleId":"250","severity":1,"message":"279","line":48,"column":37,"nodeType":"252","messageId":"253","endLine":48,"endColumn":43},{"ruleId":"250","severity":1,"message":"280","line":146,"column":9,"nodeType":"252","messageId":"253","endLine":146,"endColumn":17},{"ruleId":"250","severity":1,"message":"281","line":147,"column":11,"nodeType":"252","messageId":"253","endLine":147,"endColumn":15},{"ruleId":"250","severity":1,"message":"265","line":147,"column":17,"nodeType":"252","messageId":"253","endLine":147,"endColumn":20},{"ruleId":"250","severity":1,"message":"282","line":148,"column":10,"nodeType":"252","messageId":"253","endLine":148,"endColumn":22},{"ruleId":"250","severity":1,"message":"283","line":148,"column":24,"nodeType":"252","messageId":"253","endLine":148,"endColumn":33},{"ruleId":"284","severity":1,"message":"285","line":156,"column":32,"nodeType":"286","messageId":"287","endLine":156,"endColumn":34},{"ruleId":"288","severity":1,"message":"289","line":119,"column":23,"nodeType":"290","endLine":119,"endColumn":58},{"ruleId":"288","severity":1,"message":"289","line":66,"column":11,"nodeType":"290","endLine":76,"endColumn":13},{"ruleId":"250","severity":1,"message":"291","line":25,"column":7,"nodeType":"252","messageId":"253","endLine":25,"endColumn":21},{"ruleId":"292","severity":1,"message":"293","line":26,"column":30,"nodeType":"294","messageId":"295","endLine":26,"endColumn":31},{"ruleId":"250","severity":1,"message":"259","line":1,"column":25,"nodeType":"252","messageId":"253","endLine":1,"endColumn":38},{"ruleId":"250","severity":1,"message":"296","line":2,"column":17,"nodeType":"252","messageId":"253","endLine":2,"endColumn":25},{"ruleId":"250","severity":1,"message":"297","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":16},{"ruleId":"288","severity":1,"message":"289","line":153,"column":25,"nodeType":"290","endLine":153,"endColumn":101},{"ruleId":"250","severity":1,"message":"270","line":2,"column":25,"nodeType":"252","messageId":"253","endLine":2,"endColumn":30},{"ruleId":"250","severity":1,"message":"261","line":2,"column":32,"nodeType":"252","messageId":"253","endLine":2,"endColumn":39},{"ruleId":"250","severity":1,"message":"298","line":5,"column":32,"nodeType":"252","messageId":"253","endLine":5,"endColumn":43},{"ruleId":"250","severity":1,"message":"299","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":27},{"ruleId":"250","severity":1,"message":"300","line":1,"column":53,"nodeType":"252","messageId":"253","endLine":1,"endColumn":59},{"ruleId":"301","severity":1,"message":"302","line":43,"column":6,"nodeType":"303","endLine":43,"endColumn":8,"suggestions":"304"},{"ruleId":"250","severity":1,"message":"305","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":18},{"ruleId":"250","severity":1,"message":"272","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"306","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":14},{"ruleId":"250","severity":1,"message":"307","line":3,"column":16,"nodeType":"252","messageId":"253","endLine":3,"endColumn":27},{"ruleId":"250","severity":1,"message":"308","line":14,"column":18,"nodeType":"252","messageId":"253","endLine":14,"endColumn":25},{"ruleId":"250","severity":1,"message":"261","line":3,"column":29,"nodeType":"252","messageId":"253","endLine":3,"endColumn":36},{"ruleId":"288","severity":1,"message":"289","line":54,"column":17,"nodeType":"290","endLine":54,"endColumn":60},"@typescript-eslint/no-unused-vars","'setStaticCache' is defined but never used.","Identifier","unusedVar","no-native-reassign",["309"],"no-negated-in-lhs",["310"],"'Types' is defined but never used.","'WeaponsLookup' is defined but never used.","'PureComponent' is defined but never used.","'Segment' is defined but never used.","'List' is defined but never used.","'CharacterPortrait' is defined but never used.","'BG_HALF' is defined but never used.","'url' is assigned a value but never used.","'Categories' is defined but never used.","'Loadout' is defined but never used.","'Card' is defined but never used.","'Image' is defined but never used.","'Label' is defined but never used.","'Grid' is defined but never used.","'Header' is defined but never used.","'Tab' is defined but never used.","'getImageSrc' is defined but never used.","'FilterProvider' is defined but never used.","'useRouteMatch' is defined but never used.","'updateCharacter' is assigned a value but never used.","'filterStates' is assigned a value but never used.","'toggle' is assigned a value but never used.","'location' is assigned a value but never used.","'path' is assigned a value but never used.","'activeSeason' is assigned a value but never used.","'setSeason' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getArmoredList' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useState' is defined but never used.","'Button' is defined but never used.","'rarityColor' is defined but never used.","'DOMElement' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'onClick' and 'selected'. Either include them or remove the dependency array. If 'onClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["311"],"'BG_THIRD' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'IAnimal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"312","fix":"313"},"Update the dependencies array to be: [onClick, selected]",{"range":"314","text":"315"},[1209,1211],"[onClick, selected]"]